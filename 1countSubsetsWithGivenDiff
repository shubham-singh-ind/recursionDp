#include <bits/stdc++.h>

using namespace std;

int dp[101][101];
int count_subsetsum(int arr[], int sum, int n) {
    //Base case: smallest valid input
    if(sum == 0)
        return 1;
    if(n == 0)
        return 0;
    int &s = dp[n][sum];
    if(s!=-1) return s;
    if(arr[n-1] <= sum) {
        s = count_subsetsum(arr, sum-arr[n-1], n-1) + count_subsetsum(arr, sum, n-1);
    }else{
        s = count_subsetsum(arr, sum, n-1);
    }
    return s;
}

int countSubsetsWithDiff(int ar[], int diff, int n) {
    int sum = 0;
    for(int i=0; i<n; i++) sum += ar[i];
    int s1 = abs(sum + diff)/2;
    memset(dp, -1, sizeof(dp));
    return count_subsetsum(ar, s1, n);
}

int main()
{
    // arr[]: 1 1 2 3
    // difference: 1
    // output: 3
    // Divide array into 2 subsets such that s1-s2 = difference given (how many subsets are there)
    int ar[] = {1,1,2,3};
    int diff = 1;
    cout << countSubsetsWithDiff(ar, diff, 4);
    return 0;
}
  
