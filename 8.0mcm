#include <bits/stdc++.h>

using namespace std;

int dp[1001][1001];
int calls = 0;
int solve(int ar[], int i, int j) {
    // Base case
    if( i>=j )
        return 0;
    int ans = INT_MAX;
    calls++;
    for(int k=i; k<j; k++) {
        int tempAns = solve(ar, i, k) + solve(ar, k+1, j) + ar[i-1]*ar[k]*ar[j];
        if(tempAns < ans)
            ans = tempAns;
    }
    dp[i][j] = ans;
    return dp[i][j];
}

int solveRecursive(int ar[], int i, int j) {
    // Base case
    if( i>=j )
        return 0;
    int ans = INT_MAX;
    calls++;
    for(int k=i; k<j; k++) {
        int tempAns = solve(ar, i, k) + solve(ar, k+1, j) + ar[i-1]*ar[k]*ar[j];
        if(tempAns < ans)
            ans = tempAns;
    }
    return ans;
}

int main()
{
    // How to multiply matrices such that multiplication cost becomes minimum
    // Given array of sizes of matrices, If N is the size of array
    // then N-1 is the number of matrices.
    // Input: 40 20 30 10 30
    // A1 -> 40*20
    // A2 -> 20*30
    // A3 -> 30*10
    // A4 -> 10*30
    // Formula for dimension: A[i] = A[i-1]*A[i]
    int ar[] ={10, 30, 5, 60};
    int n = sizeof(ar)/sizeof(ar[0]);
    memset(dp, -1, sizeof(dp));
    cout << solve(ar, 1, n-1) << endl;
    cout << calls;
    return 0;
}
